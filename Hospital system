import random

class Patient:
    def __init__(self, patient_id, name, age, gender, medical_history=None, current_condition=None, appointment=None):
        self.patient_id = patient_id
        self.name = name
        self._age = age
        self._gender = gender
        self.medical_history = medical_history if medical_history else []
        self.current_condition = current_condition if current_condition else ""
        self.appointment = appointment
        self.prescriptions = Stack()

    def get_age(self):
        return self._age

    def set_age(self, value):
        if value < 0:
            raise ValueError("Age cannot be negative.")
        self._age = value

    def get_gender(self):
        return self._gender

    def set_gender(self, value):
        if value not in ["Male", "Female", "Other"]:
            raise ValueError("Gender must be 'Male', 'Female', or 'Other'.")
        self._gender = value

class Doctor:
    def __init__(self, doctor_id, name, specialty, availability=None):
        self.doctor_id = doctor_id
        self.name = name
        self.specialty = specialty
        self.availability = availability if availability else []
        self.patients = Queue()

class Prescription:
    def __init__(self, prescription_id, medication, dosage, issue_date, doctor_id):
        self.prescription_id = prescription_id
        self.medication = medication
        self._dosage = dosage
        self.issue_date = issue_date
        self.doctor_id = doctor_id

    def get_dosage(self):
        return self._dosage

    def set_dosage(self, value):
        if not value:
            raise ValueError("Dosage cannot be empty.")
        self._dosage = value

class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        else:
            return None

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)

class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            return None

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)
