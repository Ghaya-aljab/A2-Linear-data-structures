import random
from datetime import datetime, timedelta
from enum import Enum


class MedicalHistory(Enum):
    FLU = "Flu"
    COLD = "Cold"
    ALLERGY = "Allergy"
    COVID19 = "COVID-19"
    UNKNOWN = "Unknown"


class CurrentCondition(Enum):
    HEALTHY = "Healthy"
    SICK = "Sick"
    RECOVERING = "Recovering"
    CRITICAL = "Critical"
    UNKNOWN = "Unknown"


class Prescription:
    def __init__(self, medication_name, dosage, duration):
        self.medication_name = medication_name
        self.dosage = dosage
        self.duration = duration

    def __str__(self):
        return f"Medication: {self.medication_name}, Dosage: {self.dosage}, Duration: {self.duration}"


class Patient:
    def __init__(self, patient_id, name, age, gender, medical_history, current_condition):
        self.patient_id = int(patient_id)
        self.name = name
        self.age = age
        self.gender = gender
        self.medical_history = medical_history
        self.current_condition = current_condition
        self.appointments = []
        self.prescriptions = []

    def add_prescription(self, prescription):
        self.prescriptions.append(prescription)

    def update_medical_record(self, new_medical_history, new_current_condition):
        self.medical_history = new_medical_history
        self.current_condition = new_current_condition
        print(f"Updated medical record for {self.name}.")

    def __str__(self):
        prescription_str = "\n".join(str(p) for p in self.prescriptions)
        return (f"Patient ID: {self.patient_id}, Name: {self.name}, Age: {self.age}, "
                f"Gender: {self.gender}, Medical History: {self.medical_history.value}, "
                f"Current Condition: {self.current_condition.value}, Prescriptions: {prescription_str}")


class Doctor:
    def __init__(self, doctor_id, name, specialty):
        self.doctor_id = doctor_id
        self.name = name
        self.specialty = specialty

    def __str__(self):
        return f"Doctor ID: {self.doctor_id}, Name: {self.name}, Specialty: {self.specialty}"


class Appointment:
    def __init__(self, doctor, date_time):
        self.doctor = doctor
        self.date_time = date_time

    def __str__(self):
        return f"Appointment with Doctor {self.doctor.name} on {self.date_time.strftime('%Y-%m-%d %H:%M')}"


class HospitalSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.general_queue = []

    def add_patient(self, patient):
        self.patients[patient.patient_id] = patient
        self.general_queue.append(patient.patient_id)

    def add_doctor(self, doctor):
        self.doctors[doctor.doctor_id] = doctor

    def schedule_appointment(self, patient_id):
        patient_id = int(patient_id)
        patient = self.patients.get(patient_id)
        if not patient:
            print(f"Patient ID: {patient_id} not found.")
            return

        print("Available Doctors:")
        for doctor_id, doctor in self.doctors.items():
            print(f"{doctor_id}: {doctor.name} - Specialty: {doctor.specialty}")

        doctor_id = input("Choose a doctor ID for the appointment: ")
        doctor = self.doctors.get(doctor_id)

        if not doctor:
            print("Invalid doctor ID.")
            return

        date_time = datetime.now() + timedelta(days=random.randint(1, 30))
        appointment = Appointment(doctor, date_time)
        patient.appointments.append(appointment)

        self.general_queue.remove(patient.patient_id)

        print(
            f"Appointment scheduled for {patient.name} with Dr. {doctor.name} ({doctor.specialty}) on {date_time.strftime('%Y-%m-%d %H:%M')}.")

    def binary_search_patient(self, patient_id):
        patient_id = int(patient_id)
        patients_list = sorted(list(self.patients.keys()))
        low, high = 0, len(patients_list) - 1
        while low <= high:
            mid = (low + high) // 2
            if patients_list[mid] == patient_id:
                print(self.patients[patient_id])
                return True
            elif patients_list[mid] < patient_id:
                low = mid + 1
            else:
                high = mid - 1
        print("Patient ID not found.")
        return False

    def remove_patient(self, patient_id):
        patient_id = int(patient_id)
        if patient_id in self.general_queue:
            self.general_queue.remove(patient_id)
            print(f"Patient ID: {patient_id} removed from the general queue.")
        if patient_id in self.patients:
            del self.patients[patient_id]
            print(f"Patient ID: {patient_id}'s record has been removed from the hospital system.")

    def list_patients(self):
        for patient in self.patients.values():
            print(patient)

    def list_doctors(self):
        for doctor in self.doctors.values():
            print(doctor)

    def consult_patients(self):
        if not self.general_queue:
            print("No patients in the general queue.")
            return

        # Ask how many patients to add to the consultation list, in order
        num_patients_to_add = int(input("How many patients to add to the consultation list: "))
        # Ensure we do not exceed the general queue size
        num_patients_to_add = min(num_patients_to_add, len(self.general_queue))
        consultation_list = self.general_queue[:num_patients_to_add]

        while True:
            print("\nOptions:")
            print("1. View the consultation queue")
            print("2. Process the consultation queue")
            choice = input("Enter choice: ")

            if choice == "1":
                if not consultation_list:
                    print("The consultation list is currently empty.")
                else:
                    print("Consultation Queue:")
                    for patient_id in consultation_list:
                        patient = self.patients.get(patient_id)
                        print(
                            f"Patient ID: {patient.patient_id}, Name: {patient.name}, Medical Issue: {patient.medical_history.name}")
            elif choice == "2":
                for patient_id in consultation_list:
                    patient = self.patients[patient_id]
                    # Simulating medical record update and prescription addition
                    patient.update_medical_record(random.choice(list(MedicalHistory)),
                                                  random.choice(list(CurrentCondition)))
                    new_prescription = Prescription("Medication", "1 pill", "10 days")
                    patient.add_prescription(new_prescription)
                    print(
                        f"{patient.name} with medical issue {patient.medical_history.name} has been updated and has left the consultation queue.")
                # Clear the processed patients from the beginning of the general queue
                self.general_queue = self.general_queue[num_patients_to_add:]
                consultation_list.clear()  # Clear the consultation list after processing
                break
            else:
                print("Invalid choice. Please enter 1 or 2.")

    def view_general_queue(self):
        if not self.general_queue:
            print("The general consultation queue is empty.")
        else:
            print("General Consultation Queue:")
            for patient_id in self.general_queue:
                patient = self.patients.get(patient_id)
                print(f"Patient ID: {patient.patient_id}, Name: {patient.name}")

    def process_consultations(self):
        num_patients_to_consult = int(input("Enter the number of patients to consult: "))
        num_consulted = 0

        while self.general_queue and num_consulted < num_patients_to_consult:
            patient_id = self.general_queue.pop(0)
            patient = self.patients.get(patient_id)
            print(f"Consulted patient: {patient.name}.")
            # Example update and prescription for simplicity
            patient.update_medical_record(random.choice(list(MedicalHistory)), random.choice(list(CurrentCondition)))
            new_prescription = Prescription("Medication", "1 pill", "10 days")
            patient.add_prescription(new_prescription)
            print(f"Prescription added for {patient.name}: {new_prescription}")
            num_consulted += 1

        print(f"Total patients consulted: {num_consulted}")


def main_menu():
    system = HospitalSystem()
    print("Welcome to the Hospital Patient Record System")
    num_patients = int(input("\nEnter the number of patients coming to the hospital: "))
    for i in range(1, num_patients + 1):
        patient = Patient(i, f"Patient{i}", random.randint(20, 80), random.choice(["Male", "Female"]),
                          MedicalHistory.FLU, CurrentCondition.HEALTHY)
        system.add_patient(patient)
    for j in range(1, 6):  # Assuming 5 doctors for simplicity
        doctor = Doctor(f"D{j}", f"Doctor{j}", random.choice(["General", "Pediatrics", "Orthopedics"]))
        system.add_doctor(doctor)

    while True:
        print("\n--- Hospital Patient Record System Menu ---")
        print("1. List Patients")
        print("2. Schedule an Appointment")
        print("3. Search for a Patient")
        print("4. Consult Patients")
        print("5. Remove a Patient")
        print("6. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            system.list_patients()
        elif choice == "2":
            patient_id = input("\nEnter patient ID to schedule an appointment: ")
            system.schedule_appointment(int(patient_id))
        elif choice == "3":
            patient_id = input("Enter patient ID to search: ")
            if system.binary_search_patient(int(patient_id)):
                # Additional actions for found patient could be added here
                pass
        elif choice == "4":
            system.consult_patients()
        elif choice == "5":
            patient_id = input("Enter patient ID to remove: ")
            system.remove_patient(int(patient_id))
        elif choice == "6":
            print("Exiting system.")
            break
        else:
            print("Invalid choice. Please enter a valid number.")


if __name__ == "__main__":
    main_menu()
