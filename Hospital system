import random
from datetime import datetime, timedelta
from enum import Enum


class MedicalHistory(Enum):
    FLU = "Flu"
    COLD = "Cold"
    ALLERGY = "Allergy"
    COVID19 = "COVID-19"
    UNKNOWN = "Unknown"


class CurrentCondition(Enum):
    HEALTHY = "Healthy"
    SICK = "Sick"
    RECOVERING = "Recovering"
    CRITICAL = "Critical"
    UNKNOWN = "Unknown"


class Prescription:
    def __init__(self, medication_name, dosage, duration):
        self.medication_name = medication_name
        self.dosage = dosage
        self.duration = duration

    def __str__(self):
        return f"Medication: {self.medication_name}, Dosage: {self.dosage}, Duration: {self.duration}"


class Patient:
    def __init__(self, patient_id, name, age, gender, medical_history, current_condition):
        self.patient_id = int(patient_id)
        self.name = name
        self.age = age
        self.gender = gender
        self.medical_history = medical_history
        self.current_condition = current_condition
        self.appointments = []
        self.prescriptions = []

    def add_prescription(self, prescription):
        self.prescriptions.append(prescription)

    def update_medical_record(self, new_medical_history, new_current_condition):
        self.medical_history = new_medical_history
        self.current_condition = new_current_condition
        print(f"Updated medical record for {self.name}.")

    def __str__(self):
        prescription_str = "\n".join(str(p) for p in self.prescriptions)
        return (f"Patient ID: {self.patient_id}, Name: {self.name}, Age: {self.age}, "
                f"Gender: {self.gender}, Medical History: {self.medical_history.value}, "
                f"Current Condition: {self.current_condition.value}, Prescriptions:\n{prescription_str}")


class Doctor:
    def __init__(self, doctor_id, name, specialty):
        self.doctor_id = doctor_id
        self.name = name
        self.specialty = specialty

    def __str__(self):
        return f"Doctor ID: {self.doctor_id}, Name: {self.name}, Specialty: {self.specialty}"


class Appointment:
    def __init__(self, doctor, date_time):
        self.doctor = doctor
        self.date_time = date_time

    def __str__(self):
        return f"Appointment with Doctor {self.doctor.name} on {self.date_time.strftime('%Y-%m-%d %H:%M')}"


class HospitalSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.general_queue = []  # Modified to include doctor_id
        self.consulted_patients = []

    def add_patient(self, patient):
        self.patients[patient.patient_id] = patient

    def add_doctor(self, doctor):
        self.doctors[doctor.doctor_id] = doctor

    def schedule_appointment(self, patient_id):
        patient_id = int(patient_id)
        patient = self.patients.get(patient_id)
        if not patient:
            print(f"Patient ID: {patient_id} not found.")
            return

        print("Available Doctors:")
        for doctor_id, doctor in self.doctors.items():
            print(f"{doctor_id}: {doctor.name} - Specialty: {doctor.specialty}")

        doctor_id = input("Choose a doctor ID for the appointment: ")
        if doctor_id not in self.doctors:
            print("Invalid doctor ID.")
            return

        date_time = datetime.now() + timedelta(days=random.randint(1, 30))
        appointment = Appointment(self.doctors[doctor_id], date_time)
        patient.appointments.append(appointment)

        # Now add patient along with the doctor_id to the general queue
        self.general_queue.append((patient.patient_id, doctor_id))

        print(
            f"Appointment scheduled for {patient.name} with Dr. {self.doctors[doctor_id].name} on {date_time.strftime('%Y-%m-%d %H:%M')}.")

    def binary_search_patient(self, patient_id):
        patient_id = int(patient_id)
        patients_list = sorted(list(self.patients.keys()))
        low, high = 0, len(patients_list) - 1
        while low <= high:
            mid = (low + high) // 2
            if patients_list[mid] == patient_id:
                print(self.patients[patient_id])
                return True
            elif patients_list[mid] < patient_id:
                low = mid + 1
            else:
                high = mid - 1
        print("Patient ID not found.")
        return False

    def remove_patient(self, patient_id):
        patient_id = int(patient_id)
        if patient_id in self.patients:
            del self.patients[patient_id]
            print(f"Patient ID: {patient_id}'s record has been removed from the hospital system.")
            # Also remove from the queue if present
            self.general_queue = [(pid, did) for pid, did in self.general_queue if pid != patient_id]
        else:
            print(f"Patient ID: {patient_id} not found in the system.")

    def list_patients(self):
        for patient in self.patients.values():
            print(patient)

    def list_doctors(self):
        for doctor in self.doctors.values():
            print(doctor)

    def view_general_queue(self):
        if not self.general_queue:
            print("The general consultation queue is empty.")
        else:
            print("General Consultation Queue:")
            for patient_id, doctor_id in self.general_queue:
                patient = self.patients.get(patient_id)
                doctor = self.doctors.get(doctor_id)
                print(f"Patient ID: {patient.patient_id}, Name: {patient.name} - Doctor: {doctor.name}")

    def consult_patients(self):
        if not self.general_queue:
            print("No patients in the general queue.")
            return

        num_patients_to_consult = int(input("Enter the number of patients to consult: "))
        for _ in range(min(num_patients_to_consult, len(self.general_queue))):
            patient_id, doctor_id = self.general_queue.pop(0)
            patient = self.patients.get(patient_id)
            doctor = self.doctors.get(doctor_id)
            # Simulate consultation
            print(f"Consulting patient: {patient.name} with Dr. {doctor.name}.")
            # Example update and prescription for simplicity
            patient.update_medical_record(random.choice(list(MedicalHistory)), random.choice(list(CurrentCondition)))
            new_prescription = Prescription("Medication", "1 pill", "10 days")
            patient.add_prescription(new_prescription)
            print(f"Prescription added for {patient.name}: {new_prescription}")
            self.consulted_patients.append(patient_id)  # Track consulted patients

    def view_updated_records(self):
        print("Updated Records of Consulted Patients:")
        for patient_id in self.consulted_patients:
            patient = self.patients[patient_id]
            print(patient)


def main_menu():
    system = HospitalSystem()
    print("Welcome to the Hospital Patient Record System")

    # Ask for the number of patients
    num_patients = int(input("\nEnter the number of patients coming to the hospital: "))
    for i in range(1, num_patients + 1):
        name = f"Patient{i}"
        patient = Patient(i, name, random.randint(20, 80), random.choice(["Male", "Female"]),
                          random.choice(list(MedicalHistory)), random.choice(list(CurrentCondition)))
        system.add_patient(patient)

    # Optionally, ask for the number of doctors and add them to the system
    num_doctors = int(input("Enter the number of doctors available: "))
    for i in range(1, num_doctors + 1):
        name = f"Doctor{i}"
        specialty = random.choice(["General", "Pediatrics", "Orthopedics"])  # Example specialties
        doctor = Doctor(f"D{i}", name, specialty)
        system.add_doctor(doctor)

    while True:
        print("\n--- Main Menu ---")
        print("1. List Patients")
        print("2. Schedule an Appointment")
        print("3. Search for a Patient")
        print("4. Consult Patients")
        print("5. Remove a Patient")
        print("6. View General Consultation Queue")
        print("7. View Updated Records of Consulted Patients")
        print("8. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            system.list_patients()
        elif choice == "2":
            patient_id = input("Enter patient ID to schedule an appointment: ")
            system.schedule_appointment(int(patient_id))
        elif choice == "3":
            patient_id = input("Enter patient ID to search: ")
            found = system.binary_search_patient(int(patient_id))
            if found:
                # Additional details or actions for the found patient can be provided here.
                pass
        elif choice == "4":
            system.consult_patients()
        elif choice == "5":
            patient_id = input("Enter patient ID to remove: ")
            system.remove_patient(int(patient_id))
        elif choice == "6":
            system.view_general_queue()
        elif choice == "7":
            system.view_updated_records()
        elif choice == "8":
            print("Exiting system.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main_menu()
